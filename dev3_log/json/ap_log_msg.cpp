////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#include "ap_log_msg.h"

namespace slothjson {

ap_log_heart_t::ap_log_heart_t()
{
    Result = 0;
    __skip_Result = false;
    __json_has_Result = false;

    Ack = "Heartbeat";
    __skip_Ack = false;
    __json_has_Ack = false;

    __skip_ID = false;
    __json_has_ID = false;
}

ap_log_heart_t& ap_log_heart_t::operator=(const ap_log_heart_t& obj_val)
{
    this->Result = obj_val.Result;
    this->Ack = obj_val.Ack;
    this->ID = obj_val.ID;
    return *this;
}

bool ap_log_heart_t::operator==(const ap_log_heart_t& obj_val) const
{
    if (!(this->Result == obj_val.Result)) return false;
    if (!(this->Ack == obj_val.Ack)) return false;
    if (!(this->ID == obj_val.ID)) return false;
    return true;
}

bool ap_log_heart_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_Result && !encode_field(Result, "Result", alloc, json_val)) break;
        if (!__skip_Ack && !encode_field(Ack, "Ack", alloc, json_val)) break;
        if (!__skip_ID && !encode_field(ID, "ID", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool ap_log_heart_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "Result", Result, __json_has_Result)) break;
        if (!decode_field(json_val, "Ack", Ack, __json_has_Ack)) break;
        if (!decode_field(json_val, "ID", ID, __json_has_ID)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const ap_log_heart_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, ap_log_heart_t& obj_val)
{
    return obj_val.decode(json_val);
}

params_in_t::params_in_t()
{
    __skip_RPCMethod = false;
    __json_has_RPCMethod = false;

    __skip_ID = false;
    __json_has_ID = false;

    __skip_Plugin_Name = false;
    __json_has_Plugin_Name = false;

    __skip_Time = false;
    __json_has_Time = false;

    __skip_Message = false;
    __json_has_Message = false;
}

params_in_t& params_in_t::operator=(const params_in_t& obj_val)
{
    this->RPCMethod = obj_val.RPCMethod;
    this->ID = obj_val.ID;
    this->Plugin_Name = obj_val.Plugin_Name;
    this->Time = obj_val.Time;
    this->Message = obj_val.Message;
    return *this;
}

bool params_in_t::operator==(const params_in_t& obj_val) const
{
    if (!(this->RPCMethod == obj_val.RPCMethod)) return false;
    if (!(this->ID == obj_val.ID)) return false;
    if (!(this->Plugin_Name == obj_val.Plugin_Name)) return false;
    if (!(this->Time == obj_val.Time)) return false;
    if (!(this->Message == obj_val.Message)) return false;
    return true;
}

bool params_in_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_RPCMethod && !encode_field(RPCMethod, "RPCMethod", alloc, json_val)) break;
        if (!__skip_ID && !encode_field(ID, "ID", alloc, json_val)) break;
        if (!__skip_Plugin_Name && !encode_field(Plugin_Name, "Plugin_Name", alloc, json_val)) break;
        if (!__skip_Time && !encode_field(Time, "Time", alloc, json_val)) break;
        if (!__skip_Message && !encode_field(Message, "Message", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool params_in_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "RPCMethod", RPCMethod, __json_has_RPCMethod)) break;
        if (!decode_field(json_val, "ID", ID, __json_has_ID)) break;
        if (!decode_field(json_val, "Plugin_Name", Plugin_Name, __json_has_Plugin_Name)) break;
        if (!decode_field(json_val, "Time", Time, __json_has_Time)) break;
        if (!decode_field(json_val, "Message", Message, __json_has_Message)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const params_in_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, params_in_t& obj_val)
{
    return obj_val.decode(json_val);
}

params_out_t::params_out_t()
{
    Result = 0;
    __skip_Result = false;
    __json_has_Result = false;

    __skip_Ack = false;
    __json_has_Ack = false;

    __skip_ID = false;
    __json_has_ID = false;

    __skip_return_Parameter = false;
    __json_has_return_Parameter = false;
}

params_out_t& params_out_t::operator=(const params_out_t& obj_val)
{
    this->Result = obj_val.Result;
    this->Ack = obj_val.Ack;
    this->ID = obj_val.ID;
    this->return_Parameter = obj_val.return_Parameter;
    return *this;
}

bool params_out_t::operator==(const params_out_t& obj_val) const
{
    if (!(this->Result == obj_val.Result)) return false;
    if (!(this->Ack == obj_val.Ack)) return false;
    if (!(this->ID == obj_val.ID)) return false;
    if (!(this->return_Parameter == obj_val.return_Parameter)) return false;
    return true;
}

bool params_out_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_Result && !encode_field(Result, "Result", alloc, json_val)) break;
        if (!__skip_Ack && !encode_field(Ack, "Ack", alloc, json_val)) break;
        if (!__skip_ID && !encode_field(ID, "ID", alloc, json_val)) break;
        if (!__skip_return_Parameter && !encode_field(return_Parameter, "return_Parameter", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool params_out_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "Result", Result, __json_has_Result)) break;
        if (!decode_field(json_val, "Ack", Ack, __json_has_Ack)) break;
        if (!decode_field(json_val, "ID", ID, __json_has_ID)) break;
        if (!decode_field(json_val, "return_Parameter", return_Parameter, __json_has_return_Parameter)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const params_out_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, params_out_t& obj_val)
{
    return obj_val.decode(json_val);
}

params_t::params_t()
{
    __skip_DevID = false;
    __json_has_DevID = false;

    __skip_MAC = false;
    __json_has_MAC = false;

    __skip_RPCMethod = false;
    __json_has_RPCMethod = false;

    __skip_server = false;
    __json_has_server = false;

    __skip_remote = false;
    __json_has_remote = false;

    direction = 0;
    __skip_direction = false;
    __json_has_direction = false;

    Result = 0;
    __skip_Result = false;
    __json_has_Result = false;

    __skip_start_time = false;
    __json_has_start_time = false;

    __skip_end_time = false;
    __json_has_end_time = false;

    __skip_in = false;
    __json_has_in = false;

    __skip_out = false;
    __json_has_out = false;
}

params_t& params_t::operator=(const params_t& obj_val)
{
    this->DevID = obj_val.DevID;
    this->MAC = obj_val.MAC;
    this->RPCMethod = obj_val.RPCMethod;
    this->server = obj_val.server;
    this->remote = obj_val.remote;
    this->direction = obj_val.direction;
    this->Result = obj_val.Result;
    this->start_time = obj_val.start_time;
    this->end_time = obj_val.end_time;
    this->in = obj_val.in;
    this->out = obj_val.out;
    return *this;
}

bool params_t::operator==(const params_t& obj_val) const
{
    if (!(this->DevID == obj_val.DevID)) return false;
    if (!(this->MAC == obj_val.MAC)) return false;
    if (!(this->RPCMethod == obj_val.RPCMethod)) return false;
    if (!(this->server == obj_val.server)) return false;
    if (!(this->remote == obj_val.remote)) return false;
    if (!(this->direction == obj_val.direction)) return false;
    if (!(this->Result == obj_val.Result)) return false;
    if (!(this->start_time == obj_val.start_time)) return false;
    if (!(this->end_time == obj_val.end_time)) return false;
    if (!(this->in == obj_val.in)) return false;
    if (!(this->out == obj_val.out)) return false;
    return true;
}

bool params_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_DevID && !encode_field(DevID, "DevID", alloc, json_val)) break;
        if (!__skip_MAC && !encode_field(MAC, "MAC", alloc, json_val)) break;
        if (!__skip_RPCMethod && !encode_field(RPCMethod, "RPCMethod", alloc, json_val)) break;
        if (!__skip_server && !encode_field(server, "server", alloc, json_val)) break;
        if (!__skip_remote && !encode_field(remote, "remote", alloc, json_val)) break;
        if (!__skip_direction && !encode_field(direction, "direction", alloc, json_val)) break;
        if (!__skip_Result && !encode_field(Result, "Result", alloc, json_val)) break;
        if (!__skip_start_time && !encode_field(start_time, "start_time", alloc, json_val)) break;
        if (!__skip_end_time && !encode_field(end_time, "end_time", alloc, json_val)) break;
        if (!__skip_in && !encode_field(in, "in", alloc, json_val)) break;
        if (!__skip_out && !encode_field(out, "out", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool params_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "DevID", DevID, __json_has_DevID)) break;
        if (!decode_field(json_val, "MAC", MAC, __json_has_MAC)) break;
        if (!decode_field(json_val, "RPCMethod", RPCMethod, __json_has_RPCMethod)) break;
        if (!decode_field(json_val, "server", server, __json_has_server)) break;
        if (!decode_field(json_val, "remote", remote, __json_has_remote)) break;
        if (!decode_field(json_val, "direction", direction, __json_has_direction)) break;
        if (!decode_field(json_val, "Result", Result, __json_has_Result)) break;
        if (!decode_field(json_val, "start_time", start_time, __json_has_start_time)) break;
        if (!decode_field(json_val, "end_time", end_time, __json_has_end_time)) break;
        if (!decode_field(json_val, "in", in, __json_has_in)) break;
        if (!decode_field(json_val, "out", out, __json_has_out)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const params_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, params_t& obj_val)
{
    return obj_val.decode(json_val);
}

ap_log_cmd_t::ap_log_cmd_t()
{
    __skip_RPCMethod = false;
    __json_has_RPCMethod = false;

    __skip_ID = false;
    __json_has_ID = false;

    __skip_params = false;
    __json_has_params = false;
}

ap_log_cmd_t& ap_log_cmd_t::operator=(const ap_log_cmd_t& obj_val)
{
    this->RPCMethod = obj_val.RPCMethod;
    this->ID = obj_val.ID;
    this->params = obj_val.params;
    return *this;
}

bool ap_log_cmd_t::operator==(const ap_log_cmd_t& obj_val) const
{
    if (!(this->RPCMethod == obj_val.RPCMethod)) return false;
    if (!(this->ID == obj_val.ID)) return false;
    if (!(this->params == obj_val.params)) return false;
    return true;
}

bool ap_log_cmd_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_RPCMethod && !encode_field(RPCMethod, "RPCMethod", alloc, json_val)) break;
        if (!__skip_ID && !encode_field(ID, "ID", alloc, json_val)) break;
        if (!__skip_params && !encode_field(params, "params", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool ap_log_cmd_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "RPCMethod", RPCMethod, __json_has_RPCMethod)) break;
        if (!decode_field(json_val, "ID", ID, __json_has_ID)) break;
        if (!decode_field(json_val, "params", params, __json_has_params)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const ap_log_cmd_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, ap_log_cmd_t& obj_val)
{
    return obj_val.decode(json_val);
}

} // namespace slothjson