////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#include "dispatcher_msg.h"

namespace slothjson {

RPCMethod_t::RPCMethod_t()
{
    __skip_RPCMethod = false;
    __json_has_RPCMethod = false;

    __skip_Vendor = false;
    __json_has_Vendor = false;

    __skip_Model = false;
    __json_has_Model = false;

    __skip_FirmwareVer = false;
    __json_has_FirmwareVer = false;

    __skip_HardwareVer = false;
    __json_has_HardwareVer = false;

    __skip_MAC = false;
    __json_has_MAC = false;

    __skip_IPAddr = false;
    __json_has_IPAddr = false;

    __skip_PlatformID = false;
    __json_has_PlatformID = false;

    __skip_CheckSN = false;
    __json_has_CheckSN = false;
}

RPCMethod_t& RPCMethod_t::operator=(const RPCMethod_t& obj_val)
{
    this->RPCMethod = obj_val.RPCMethod;
    this->Vendor = obj_val.Vendor;
    this->Model = obj_val.Model;
    this->FirmwareVer = obj_val.FirmwareVer;
    this->HardwareVer = obj_val.HardwareVer;
    this->MAC = obj_val.MAC;
    this->IPAddr = obj_val.IPAddr;
    this->PlatformID = obj_val.PlatformID;
    this->CheckSN = obj_val.CheckSN;
    return *this;
}

bool RPCMethod_t::operator==(const RPCMethod_t& obj_val) const
{
    if (!(this->RPCMethod == obj_val.RPCMethod)) return false;
    if (!(this->Vendor == obj_val.Vendor)) return false;
    if (!(this->Model == obj_val.Model)) return false;
    if (!(this->FirmwareVer == obj_val.FirmwareVer)) return false;
    if (!(this->HardwareVer == obj_val.HardwareVer)) return false;
    if (!(this->MAC == obj_val.MAC)) return false;
    if (!(this->IPAddr == obj_val.IPAddr)) return false;
    if (!(this->PlatformID == obj_val.PlatformID)) return false;
    if (!(this->CheckSN == obj_val.CheckSN)) return false;
    return true;
}

bool RPCMethod_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_RPCMethod && !encode_field(RPCMethod, "RPCMethod", alloc, json_val)) break;
        if (!__skip_Vendor && !encode_field(Vendor, "Vendor", alloc, json_val)) break;
        if (!__skip_Model && !encode_field(Model, "Model", alloc, json_val)) break;
        if (!__skip_FirmwareVer && !encode_field(FirmwareVer, "FirmwareVer", alloc, json_val)) break;
        if (!__skip_HardwareVer && !encode_field(HardwareVer, "HardwareVer", alloc, json_val)) break;
        if (!__skip_MAC && !encode_field(MAC, "MAC", alloc, json_val)) break;
        if (!__skip_IPAddr && !encode_field(IPAddr, "IPAddr", alloc, json_val)) break;
        if (!__skip_PlatformID && !encode_field(PlatformID, "PlatformID", alloc, json_val)) break;
        if (!__skip_CheckSN && !encode_field(CheckSN, "CheckSN", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool RPCMethod_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "RPCMethod", RPCMethod, __json_has_RPCMethod)) break;
        if (!decode_field(json_val, "Vendor", Vendor, __json_has_Vendor)) break;
        if (!decode_field(json_val, "Model", Model, __json_has_Model)) break;
        if (!decode_field(json_val, "FirmwareVer", FirmwareVer, __json_has_FirmwareVer)) break;
        if (!decode_field(json_val, "HardwareVer", HardwareVer, __json_has_HardwareVer)) break;
        if (!decode_field(json_val, "MAC", MAC, __json_has_MAC)) break;
        if (!decode_field(json_val, "IPAddr", IPAddr, __json_has_IPAddr)) break;
        if (!decode_field(json_val, "PlatformID", PlatformID, __json_has_PlatformID)) break;
        if (!decode_field(json_val, "CheckSN", CheckSN, __json_has_CheckSN)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const RPCMethod_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, RPCMethod_t& obj_val)
{
    return obj_val.decode(json_val);
}

ResultAck_t::ResultAck_t()
{
    Result = 0;
    __skip_Result = false;
    __json_has_Result = false;

    __skip_Ack = false;
    __json_has_Ack = false;
}

ResultAck_t& ResultAck_t::operator=(const ResultAck_t& obj_val)
{
    this->Result = obj_val.Result;
    this->Ack = obj_val.Ack;
    return *this;
}

bool ResultAck_t::operator==(const ResultAck_t& obj_val) const
{
    if (!(this->Result == obj_val.Result)) return false;
    if (!(this->Ack == obj_val.Ack)) return false;
    return true;
}

bool ResultAck_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_Result && !encode_field(Result, "Result", alloc, json_val)) break;
        if (!__skip_Ack && !encode_field(Ack, "Ack", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool ResultAck_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "Result", Result, __json_has_Result)) break;
        if (!decode_field(json_val, "Ack", Ack, __json_has_Ack)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const ResultAck_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, ResultAck_t& obj_val)
{
    return obj_val.decode(json_val);
}

BootFirstAck_t::BootFirstAck_t()
{
    Result = 0;
    __skip_Result = false;
    __json_has_Result = false;

    __skip_ChallengeCode = false;
    __json_has_ChallengeCode = false;

    Interval = 0;
    __skip_Interval = false;
    __json_has_Interval = false;

    __skip_ServerIP = false;
    __json_has_ServerIP = false;
}

BootFirstAck_t& BootFirstAck_t::operator=(const BootFirstAck_t& obj_val)
{
    this->Result = obj_val.Result;
    this->ChallengeCode = obj_val.ChallengeCode;
    this->Interval = obj_val.Interval;
    this->ServerIP = obj_val.ServerIP;
    return *this;
}

bool BootFirstAck_t::operator==(const BootFirstAck_t& obj_val) const
{
    if (!(this->Result == obj_val.Result)) return false;
    if (!(this->ChallengeCode == obj_val.ChallengeCode)) return false;
    if (!(this->Interval == obj_val.Interval)) return false;
    if (!(this->ServerIP == obj_val.ServerIP)) return false;
    return true;
}

bool BootFirstAck_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_Result && !encode_field(Result, "Result", alloc, json_val)) break;
        if (!__skip_ChallengeCode && !encode_field(ChallengeCode, "ChallengeCode", alloc, json_val)) break;
        if (!__skip_Interval && !encode_field(Interval, "Interval", alloc, json_val)) break;
        if (!__skip_ServerIP && !encode_field(ServerIP, "ServerIP", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool BootFirstAck_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "Result", Result, __json_has_Result)) break;
        if (!decode_field(json_val, "ChallengeCode", ChallengeCode, __json_has_ChallengeCode)) break;
        if (!decode_field(json_val, "Interval", Interval, __json_has_Interval)) break;
        if (!decode_field(json_val, "ServerIP", ServerIP, __json_has_ServerIP)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const BootFirstAck_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, BootFirstAck_t& obj_val)
{
    return obj_val.decode(json_val);
}

RegisterFirstAck_t::RegisterFirstAck_t()
{
    Result = 0;
    __skip_Result = false;
    __json_has_Result = false;

    __skip_ServerAddr = false;
    __json_has_ServerAddr = false;

    Interval = 0;
    __skip_Interval = false;
    __json_has_Interval = false;

    ServerPort = 0;
    __skip_ServerPort = false;
    __json_has_ServerPort = false;

    __skip_ServerIP = false;
    __json_has_ServerIP = false;
}

RegisterFirstAck_t& RegisterFirstAck_t::operator=(const RegisterFirstAck_t& obj_val)
{
    this->Result = obj_val.Result;
    this->ServerAddr = obj_val.ServerAddr;
    this->Interval = obj_val.Interval;
    this->ServerPort = obj_val.ServerPort;
    this->ServerIP = obj_val.ServerIP;
    return *this;
}

bool RegisterFirstAck_t::operator==(const RegisterFirstAck_t& obj_val) const
{
    if (!(this->Result == obj_val.Result)) return false;
    if (!(this->ServerAddr == obj_val.ServerAddr)) return false;
    if (!(this->Interval == obj_val.Interval)) return false;
    if (!(this->ServerPort == obj_val.ServerPort)) return false;
    if (!(this->ServerIP == obj_val.ServerIP)) return false;
    return true;
}

bool RegisterFirstAck_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_Result && !encode_field(Result, "Result", alloc, json_val)) break;
        if (!__skip_ServerAddr && !encode_field(ServerAddr, "ServerAddr", alloc, json_val)) break;
        if (!__skip_Interval && !encode_field(Interval, "Interval", alloc, json_val)) break;
        if (!__skip_ServerPort && !encode_field(ServerPort, "ServerPort", alloc, json_val)) break;
        if (!__skip_ServerIP && !encode_field(ServerIP, "ServerIP", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool RegisterFirstAck_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "Result", Result, __json_has_Result)) break;
        if (!decode_field(json_val, "ServerAddr", ServerAddr, __json_has_ServerAddr)) break;
        if (!decode_field(json_val, "Interval", Interval, __json_has_Interval)) break;
        if (!decode_field(json_val, "ServerPort", ServerPort, __json_has_ServerPort)) break;
        if (!decode_field(json_val, "ServerIP", ServerIP, __json_has_ServerIP)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const RegisterFirstAck_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, RegisterFirstAck_t& obj_val)
{
    return obj_val.decode(json_val);
}

DevMap_t::DevMap_t()
{
    __skip_MAC = false;
    __json_has_MAC = false;

    __skip_Vendor = false;
    __json_has_Vendor = false;

    __skip_Model = false;
    __json_has_Model = false;

    __skip_FirmwareVer = false;
    __json_has_FirmwareVer = false;

    __skip_HardwareVer = false;
    __json_has_HardwareVer = false;

    __skip_IPAddr = false;
    __json_has_IPAddr = false;

    __skip_PlatformID = false;
    __json_has_PlatformID = false;

    __skip_remote = false;
    __json_has_remote = false;

    __skip_rnd = false;
    __json_has_rnd = false;

    last_time = 0;
    __skip_last_time = false;
    __json_has_last_time = false;

    recv_pkts = 0;
    __skip_recv_pkts = false;
    __json_has_recv_pkts = false;

    __skip_sn = false;
    __json_has_sn = false;

    __skip_ssn = false;
    __json_has_ssn = false;

    __skip_ssid1 = false;
    __json_has_ssid1 = false;

    __skip_ssid1pass = false;
    __json_has_ssid1pass = false;

    __skip_adminpass = false;
    __json_has_adminpass = false;

    dev_id = 0;
    __skip_dev_id = false;
    __json_has_dev_id = false;

    plan_id = 0;
    __skip_plan_id = false;
    __json_has_plan_id = false;
}

DevMap_t& DevMap_t::operator=(const DevMap_t& obj_val)
{
    this->MAC = obj_val.MAC;
    this->Vendor = obj_val.Vendor;
    this->Model = obj_val.Model;
    this->FirmwareVer = obj_val.FirmwareVer;
    this->HardwareVer = obj_val.HardwareVer;
    this->IPAddr = obj_val.IPAddr;
    this->PlatformID = obj_val.PlatformID;
    this->remote = obj_val.remote;
    this->rnd = obj_val.rnd;
    this->last_time = obj_val.last_time;
    this->recv_pkts = obj_val.recv_pkts;
    this->sn = obj_val.sn;
    this->ssn = obj_val.ssn;
    this->ssid1 = obj_val.ssid1;
    this->ssid1pass = obj_val.ssid1pass;
    this->adminpass = obj_val.adminpass;
    this->dev_id = obj_val.dev_id;
    this->plan_id = obj_val.plan_id;
    return *this;
}

bool DevMap_t::operator==(const DevMap_t& obj_val) const
{
    if (!(this->MAC == obj_val.MAC)) return false;
    if (!(this->Vendor == obj_val.Vendor)) return false;
    if (!(this->Model == obj_val.Model)) return false;
    if (!(this->FirmwareVer == obj_val.FirmwareVer)) return false;
    if (!(this->HardwareVer == obj_val.HardwareVer)) return false;
    if (!(this->IPAddr == obj_val.IPAddr)) return false;
    if (!(this->PlatformID == obj_val.PlatformID)) return false;
    if (!(this->remote == obj_val.remote)) return false;
    if (!(this->rnd == obj_val.rnd)) return false;
    if (!(this->last_time == obj_val.last_time)) return false;
    if (!(this->recv_pkts == obj_val.recv_pkts)) return false;
    if (!(this->sn == obj_val.sn)) return false;
    if (!(this->ssn == obj_val.ssn)) return false;
    if (!(this->ssid1 == obj_val.ssid1)) return false;
    if (!(this->ssid1pass == obj_val.ssid1pass)) return false;
    if (!(this->adminpass == obj_val.adminpass)) return false;
    if (!(this->dev_id == obj_val.dev_id)) return false;
    if (!(this->plan_id == obj_val.plan_id)) return false;
    return true;
}

bool DevMap_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_MAC && !encode_field(MAC, "MAC", alloc, json_val)) break;
        if (!__skip_Vendor && !encode_field(Vendor, "Vendor", alloc, json_val)) break;
        if (!__skip_Model && !encode_field(Model, "Model", alloc, json_val)) break;
        if (!__skip_FirmwareVer && !encode_field(FirmwareVer, "FirmwareVer", alloc, json_val)) break;
        if (!__skip_HardwareVer && !encode_field(HardwareVer, "HardwareVer", alloc, json_val)) break;
        if (!__skip_IPAddr && !encode_field(IPAddr, "IPAddr", alloc, json_val)) break;
        if (!__skip_PlatformID && !encode_field(PlatformID, "PlatformID", alloc, json_val)) break;
        if (!__skip_remote && !encode_field(remote, "remote", alloc, json_val)) break;
        if (!__skip_rnd && !encode_field(rnd, "rnd", alloc, json_val)) break;
        if (!__skip_last_time && !encode_field(last_time, "last_time", alloc, json_val)) break;
        if (!__skip_recv_pkts && !encode_field(recv_pkts, "recv_pkts", alloc, json_val)) break;
        if (!__skip_sn && !encode_field(sn, "sn", alloc, json_val)) break;
        if (!__skip_ssn && !encode_field(ssn, "ssn", alloc, json_val)) break;
        if (!__skip_ssid1 && !encode_field(ssid1, "ssid1", alloc, json_val)) break;
        if (!__skip_ssid1pass && !encode_field(ssid1pass, "ssid1pass", alloc, json_val)) break;
        if (!__skip_adminpass && !encode_field(adminpass, "adminpass", alloc, json_val)) break;
        if (!__skip_dev_id && !encode_field(dev_id, "dev_id", alloc, json_val)) break;
        if (!__skip_plan_id && !encode_field(plan_id, "plan_id", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool DevMap_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "MAC", MAC, __json_has_MAC)) break;
        if (!decode_field(json_val, "Vendor", Vendor, __json_has_Vendor)) break;
        if (!decode_field(json_val, "Model", Model, __json_has_Model)) break;
        if (!decode_field(json_val, "FirmwareVer", FirmwareVer, __json_has_FirmwareVer)) break;
        if (!decode_field(json_val, "HardwareVer", HardwareVer, __json_has_HardwareVer)) break;
        if (!decode_field(json_val, "IPAddr", IPAddr, __json_has_IPAddr)) break;
        if (!decode_field(json_val, "PlatformID", PlatformID, __json_has_PlatformID)) break;
        if (!decode_field(json_val, "remote", remote, __json_has_remote)) break;
        if (!decode_field(json_val, "rnd", rnd, __json_has_rnd)) break;
        if (!decode_field(json_val, "last_time", last_time, __json_has_last_time)) break;
        if (!decode_field(json_val, "recv_pkts", recv_pkts, __json_has_recv_pkts)) break;
        if (!decode_field(json_val, "sn", sn, __json_has_sn)) break;
        if (!decode_field(json_val, "ssn", ssn, __json_has_ssn)) break;
        if (!decode_field(json_val, "ssid1", ssid1, __json_has_ssid1)) break;
        if (!decode_field(json_val, "ssid1pass", ssid1pass, __json_has_ssid1pass)) break;
        if (!decode_field(json_val, "adminpass", adminpass, __json_has_adminpass)) break;
        if (!decode_field(json_val, "dev_id", dev_id, __json_has_dev_id)) break;
        if (!decode_field(json_val, "plan_id", plan_id, __json_has_plan_id)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const DevMap_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, DevMap_t& obj_val)
{
    return obj_val.decode(json_val);
}

DevConfig_t::DevConfig_t()
{
    __skip_MAC = false;
    __json_has_MAC = false;

    platcode = 0;
    __skip_platcode = false;
    __json_has_platcode = false;
}

DevConfig_t& DevConfig_t::operator=(const DevConfig_t& obj_val)
{
    this->MAC = obj_val.MAC;
    this->platcode = obj_val.platcode;
    return *this;
}

bool DevConfig_t::operator==(const DevConfig_t& obj_val) const
{
    if (!(this->MAC == obj_val.MAC)) return false;
    if (!(this->platcode == obj_val.platcode)) return false;
    return true;
}

bool DevConfig_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_MAC && !encode_field(MAC, "MAC", alloc, json_val)) break;
        if (!__skip_platcode && !encode_field(platcode, "platcode", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool DevConfig_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "MAC", MAC, __json_has_MAC)) break;
        if (!decode_field(json_val, "platcode", platcode, __json_has_platcode)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const DevConfig_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, DevConfig_t& obj_val)
{
    return obj_val.decode(json_val);
}

NetcoreConfig_t::NetcoreConfig_t()
{
    __skip_param_name = false;
    __json_has_param_name = false;

    __skip_param_value = false;
    __json_has_param_value = false;

    param_time = 0;
    __skip_param_time = false;
    __json_has_param_time = false;
}

NetcoreConfig_t& NetcoreConfig_t::operator=(const NetcoreConfig_t& obj_val)
{
    this->param_name = obj_val.param_name;
    this->param_value = obj_val.param_value;
    this->param_time = obj_val.param_time;
    return *this;
}

bool NetcoreConfig_t::operator==(const NetcoreConfig_t& obj_val) const
{
    if (!(this->param_name == obj_val.param_name)) return false;
    if (!(this->param_value == obj_val.param_value)) return false;
    if (!(this->param_time == obj_val.param_time)) return false;
    return true;
}

bool NetcoreConfig_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_param_name && !encode_field(param_name, "param_name", alloc, json_val)) break;
        if (!__skip_param_value && !encode_field(param_value, "param_value", alloc, json_val)) break;
        if (!__skip_param_time && !encode_field(param_time, "param_time", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool NetcoreConfig_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "param_name", param_name, __json_has_param_name)) break;
        if (!decode_field(json_val, "param_value", param_value, __json_has_param_value)) break;
        if (!decode_field(json_val, "param_time", param_time, __json_has_param_time)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const NetcoreConfig_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, NetcoreConfig_t& obj_val)
{
    return obj_val.decode(json_val);
}

OpSvcAddr_t::OpSvcAddr_t()
{
    svr_addr_id = 0;
    __skip_svr_addr_id = false;
    __json_has_svr_addr_id = false;

    svr_provides_id = 0;
    __skip_svr_provides_id = false;
    __json_has_svr_provides_id = false;

    __skip_svr_addr = false;
    __json_has_svr_addr = false;

    svr_port = 0;
    __skip_svr_port = false;
    __json_has_svr_port = false;
}

OpSvcAddr_t& OpSvcAddr_t::operator=(const OpSvcAddr_t& obj_val)
{
    this->svr_addr_id = obj_val.svr_addr_id;
    this->svr_provides_id = obj_val.svr_provides_id;
    this->svr_addr = obj_val.svr_addr;
    this->svr_port = obj_val.svr_port;
    return *this;
}

bool OpSvcAddr_t::operator==(const OpSvcAddr_t& obj_val) const
{
    if (!(this->svr_addr_id == obj_val.svr_addr_id)) return false;
    if (!(this->svr_provides_id == obj_val.svr_provides_id)) return false;
    if (!(this->svr_addr == obj_val.svr_addr)) return false;
    if (!(this->svr_port == obj_val.svr_port)) return false;
    return true;
}

bool OpSvcAddr_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_svr_addr_id && !encode_field(svr_addr_id, "svr_addr_id", alloc, json_val)) break;
        if (!__skip_svr_provides_id && !encode_field(svr_provides_id, "svr_provides_id", alloc, json_val)) break;
        if (!__skip_svr_addr && !encode_field(svr_addr, "svr_addr", alloc, json_val)) break;
        if (!__skip_svr_port && !encode_field(svr_port, "svr_port", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool OpSvcAddr_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "svr_addr_id", svr_addr_id, __json_has_svr_addr_id)) break;
        if (!decode_field(json_val, "svr_provides_id", svr_provides_id, __json_has_svr_provides_id)) break;
        if (!decode_field(json_val, "svr_addr", svr_addr, __json_has_svr_addr)) break;
        if (!decode_field(json_val, "svr_port", svr_port, __json_has_svr_port)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const OpSvcAddr_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, OpSvcAddr_t& obj_val)
{
    return obj_val.decode(json_val);
}

PlatIdPer_t::PlatIdPer_t()
{
    ID = 0;
    __skip_ID = false;
    __json_has_ID = false;

    per = 0;
    __skip_per = false;
    __json_has_per = false;
}

PlatIdPer_t& PlatIdPer_t::operator=(const PlatIdPer_t& obj_val)
{
    this->ID = obj_val.ID;
    this->per = obj_val.per;
    return *this;
}

bool PlatIdPer_t::operator==(const PlatIdPer_t& obj_val) const
{
    if (!(this->ID == obj_val.ID)) return false;
    if (!(this->per == obj_val.per)) return false;
    return true;
}

bool PlatIdPer_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_ID && !encode_field(ID, "ID", alloc, json_val)) break;
        if (!__skip_per && !encode_field(per, "per", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool PlatIdPer_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "ID", ID, __json_has_ID)) break;
        if (!decode_field(json_val, "per", per, __json_has_per)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const PlatIdPer_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, PlatIdPer_t& obj_val)
{
    return obj_val.decode(json_val);
}

DispatcherVip_t::DispatcherVip_t()
{
    __skip_mac = false;
    __json_has_mac = false;

    addtime = 0;
    __skip_addtime = false;
    __json_has_addtime = false;

    __skip_info = false;
    __json_has_info = false;

    loglev = 0;
    __skip_loglev = false;
    __json_has_loglev = false;
}

DispatcherVip_t& DispatcherVip_t::operator=(const DispatcherVip_t& obj_val)
{
    this->mac = obj_val.mac;
    this->addtime = obj_val.addtime;
    this->info = obj_val.info;
    this->loglev = obj_val.loglev;
    return *this;
}

bool DispatcherVip_t::operator==(const DispatcherVip_t& obj_val) const
{
    if (!(this->mac == obj_val.mac)) return false;
    if (!(this->addtime == obj_val.addtime)) return false;
    if (!(this->info == obj_val.info)) return false;
    if (!(this->loglev == obj_val.loglev)) return false;
    return true;
}

bool DispatcherVip_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_mac && !encode_field(mac, "mac", alloc, json_val)) break;
        if (!__skip_addtime && !encode_field(addtime, "addtime", alloc, json_val)) break;
        if (!__skip_info && !encode_field(info, "info", alloc, json_val)) break;
        if (!__skip_loglev && !encode_field(loglev, "loglev", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool DispatcherVip_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "mac", mac, __json_has_mac)) break;
        if (!decode_field(json_val, "addtime", addtime, __json_has_addtime)) break;
        if (!decode_field(json_val, "info", info, __json_has_info)) break;
        if (!decode_field(json_val, "loglev", loglev, __json_has_loglev)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const DispatcherVip_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, DispatcherVip_t& obj_val)
{
    return obj_val.decode(json_val);
}

DispatcherLog_t::DispatcherLog_t()
{
    __skip_idnum = false;
    __json_has_idnum = false;

    direction = 0;
    __skip_direction = false;
    __json_has_direction = false;

    step = 0;
    __skip_step = false;
    __json_has_step = false;

    result = 0;
    __skip_result = false;
    __json_has_result = false;

    __skip_mac = false;
    __json_has_mac = false;

    __skip_action = false;
    __json_has_action = false;

    __skip_hostip = false;
    __json_has_hostip = false;

    begintime = 0;
    __skip_begintime = false;
    __json_has_begintime = false;

    begintime_ms = 0;
    __skip_begintime_ms = false;
    __json_has_begintime_ms = false;

    addtime = 0;
    __skip_addtime = false;
    __json_has_addtime = false;

    addtime_ms = 0;
    __skip_addtime_ms = false;
    __json_has_addtime_ms = false;

    costtime = 0;
    __skip_costtime = false;
    __json_has_costtime = false;

    __skip_indata = false;
    __json_has_indata = false;

    __skip_outdata = false;
    __json_has_outdata = false;

    __skip_userip = false;
    __json_has_userip = false;
}

DispatcherLog_t& DispatcherLog_t::operator=(const DispatcherLog_t& obj_val)
{
    this->idnum = obj_val.idnum;
    this->direction = obj_val.direction;
    this->step = obj_val.step;
    this->result = obj_val.result;
    this->mac = obj_val.mac;
    this->action = obj_val.action;
    this->hostip = obj_val.hostip;
    this->begintime = obj_val.begintime;
    this->begintime_ms = obj_val.begintime_ms;
    this->addtime = obj_val.addtime;
    this->addtime_ms = obj_val.addtime_ms;
    this->costtime = obj_val.costtime;
    this->indata = obj_val.indata;
    this->outdata = obj_val.outdata;
    this->userip = obj_val.userip;
    return *this;
}

bool DispatcherLog_t::operator==(const DispatcherLog_t& obj_val) const
{
    if (!(this->idnum == obj_val.idnum)) return false;
    if (!(this->direction == obj_val.direction)) return false;
    if (!(this->step == obj_val.step)) return false;
    if (!(this->result == obj_val.result)) return false;
    if (!(this->mac == obj_val.mac)) return false;
    if (!(this->action == obj_val.action)) return false;
    if (!(this->hostip == obj_val.hostip)) return false;
    if (!(this->begintime == obj_val.begintime)) return false;
    if (!(this->begintime_ms == obj_val.begintime_ms)) return false;
    if (!(this->addtime == obj_val.addtime)) return false;
    if (!(this->addtime_ms == obj_val.addtime_ms)) return false;
    if (!(this->costtime == obj_val.costtime)) return false;
    if (!(this->indata == obj_val.indata)) return false;
    if (!(this->outdata == obj_val.outdata)) return false;
    if (!(this->userip == obj_val.userip)) return false;
    return true;
}

bool DispatcherLog_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_idnum && !encode_field(idnum, "idnum", alloc, json_val)) break;
        if (!__skip_direction && !encode_field(direction, "direction", alloc, json_val)) break;
        if (!__skip_step && !encode_field(step, "step", alloc, json_val)) break;
        if (!__skip_result && !encode_field(result, "result", alloc, json_val)) break;
        if (!__skip_mac && !encode_field(mac, "mac", alloc, json_val)) break;
        if (!__skip_action && !encode_field(action, "action", alloc, json_val)) break;
        if (!__skip_hostip && !encode_field(hostip, "hostip", alloc, json_val)) break;
        if (!__skip_begintime && !encode_field(begintime, "begintime", alloc, json_val)) break;
        if (!__skip_begintime_ms && !encode_field(begintime_ms, "begintime_ms", alloc, json_val)) break;
        if (!__skip_addtime && !encode_field(addtime, "addtime", alloc, json_val)) break;
        if (!__skip_addtime_ms && !encode_field(addtime_ms, "addtime_ms", alloc, json_val)) break;
        if (!__skip_costtime && !encode_field(costtime, "costtime", alloc, json_val)) break;
        if (!__skip_indata && !encode_field(indata, "indata", alloc, json_val)) break;
        if (!__skip_outdata && !encode_field(outdata, "outdata", alloc, json_val)) break;
        if (!__skip_userip && !encode_field(userip, "userip", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool DispatcherLog_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "idnum", idnum, __json_has_idnum)) break;
        if (!decode_field(json_val, "direction", direction, __json_has_direction)) break;
        if (!decode_field(json_val, "step", step, __json_has_step)) break;
        if (!decode_field(json_val, "result", result, __json_has_result)) break;
        if (!decode_field(json_val, "mac", mac, __json_has_mac)) break;
        if (!decode_field(json_val, "action", action, __json_has_action)) break;
        if (!decode_field(json_val, "hostip", hostip, __json_has_hostip)) break;
        if (!decode_field(json_val, "begintime", begintime, __json_has_begintime)) break;
        if (!decode_field(json_val, "begintime_ms", begintime_ms, __json_has_begintime_ms)) break;
        if (!decode_field(json_val, "addtime", addtime, __json_has_addtime)) break;
        if (!decode_field(json_val, "addtime_ms", addtime_ms, __json_has_addtime_ms)) break;
        if (!decode_field(json_val, "costtime", costtime, __json_has_costtime)) break;
        if (!decode_field(json_val, "indata", indata, __json_has_indata)) break;
        if (!decode_field(json_val, "outdata", outdata, __json_has_outdata)) break;
        if (!decode_field(json_val, "userip", userip, __json_has_userip)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const DispatcherLog_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, DispatcherLog_t& obj_val)
{
    return obj_val.decode(json_val);
}

} // namespace slothjson