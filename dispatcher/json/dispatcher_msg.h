////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#ifndef __dispatcher_msg_20180710165005_h__
#define __dispatcher_msg_20180710165005_h__

#include "slothjson.h"

namespace slothjson {

struct RPCMethod_t
{
    std::string RPCMethod;
    std::string Vendor;
    std::string Model;
    std::string FirmwareVer;
    std::string HardwareVer;
    std::string MAC;
    std::string IPAddr;
    std::string PlatformID;
    std::string CheckSN;

    void skip_RPCMethod() { __skip_RPCMethod = true; }
    void skip_Vendor() { __skip_Vendor = true; }
    void skip_Model() { __skip_Model = true; }
    void skip_FirmwareVer() { __skip_FirmwareVer = true; }
    void skip_HardwareVer() { __skip_HardwareVer = true; }
    void skip_MAC() { __skip_MAC = true; }
    void skip_IPAddr() { __skip_IPAddr = true; }
    void skip_PlatformID() { __skip_PlatformID = true; }
    void skip_CheckSN() { __skip_CheckSN = true; }

    bool json_has_RPCMethod() const { return __json_has_RPCMethod; }
    bool json_has_Vendor() const { return __json_has_Vendor; }
    bool json_has_Model() const { return __json_has_Model; }
    bool json_has_FirmwareVer() const { return __json_has_FirmwareVer; }
    bool json_has_HardwareVer() const { return __json_has_HardwareVer; }
    bool json_has_MAC() const { return __json_has_MAC; }
    bool json_has_IPAddr() const { return __json_has_IPAddr; }
    bool json_has_PlatformID() const { return __json_has_PlatformID; }
    bool json_has_CheckSN() const { return __json_has_CheckSN; }

    RPCMethod_t();
    RPCMethod_t& operator=(const RPCMethod_t& obj_val);
    bool operator==(const RPCMethod_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_RPCMethod;
    bool __skip_Vendor;
    bool __skip_Model;
    bool __skip_FirmwareVer;
    bool __skip_HardwareVer;
    bool __skip_MAC;
    bool __skip_IPAddr;
    bool __skip_PlatformID;
    bool __skip_CheckSN;

    bool __json_has_RPCMethod;
    bool __json_has_Vendor;
    bool __json_has_Model;
    bool __json_has_FirmwareVer;
    bool __json_has_HardwareVer;
    bool __json_has_MAC;
    bool __json_has_IPAddr;
    bool __json_has_PlatformID;
    bool __json_has_CheckSN;
};

bool encode(const RPCMethod_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, RPCMethod_t& obj_val);

struct ResultAck_t
{
    int32_t Result;
    std::string Ack;

    void skip_Result() { __skip_Result = true; }
    void skip_Ack() { __skip_Ack = true; }

    bool json_has_Result() const { return __json_has_Result; }
    bool json_has_Ack() const { return __json_has_Ack; }

    ResultAck_t();
    ResultAck_t& operator=(const ResultAck_t& obj_val);
    bool operator==(const ResultAck_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_Result;
    bool __skip_Ack;

    bool __json_has_Result;
    bool __json_has_Ack;
};

bool encode(const ResultAck_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, ResultAck_t& obj_val);

struct BootFirstAck_t
{
    int32_t Result;
    std::string ChallengeCode;
    int32_t Interval;
    std::string ServerIP;

    void skip_Result() { __skip_Result = true; }
    void skip_ChallengeCode() { __skip_ChallengeCode = true; }
    void skip_Interval() { __skip_Interval = true; }
    void skip_ServerIP() { __skip_ServerIP = true; }

    bool json_has_Result() const { return __json_has_Result; }
    bool json_has_ChallengeCode() const { return __json_has_ChallengeCode; }
    bool json_has_Interval() const { return __json_has_Interval; }
    bool json_has_ServerIP() const { return __json_has_ServerIP; }

    BootFirstAck_t();
    BootFirstAck_t& operator=(const BootFirstAck_t& obj_val);
    bool operator==(const BootFirstAck_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_Result;
    bool __skip_ChallengeCode;
    bool __skip_Interval;
    bool __skip_ServerIP;

    bool __json_has_Result;
    bool __json_has_ChallengeCode;
    bool __json_has_Interval;
    bool __json_has_ServerIP;
};

bool encode(const BootFirstAck_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, BootFirstAck_t& obj_val);

struct RegisterFirstAck_t
{
    int32_t Result;
    std::string ServerAddr;
    int32_t Interval;
    int32_t ServerPort;
    std::string ServerIP;

    void skip_Result() { __skip_Result = true; }
    void skip_ServerAddr() { __skip_ServerAddr = true; }
    void skip_Interval() { __skip_Interval = true; }
    void skip_ServerPort() { __skip_ServerPort = true; }
    void skip_ServerIP() { __skip_ServerIP = true; }

    bool json_has_Result() const { return __json_has_Result; }
    bool json_has_ServerAddr() const { return __json_has_ServerAddr; }
    bool json_has_Interval() const { return __json_has_Interval; }
    bool json_has_ServerPort() const { return __json_has_ServerPort; }
    bool json_has_ServerIP() const { return __json_has_ServerIP; }

    RegisterFirstAck_t();
    RegisterFirstAck_t& operator=(const RegisterFirstAck_t& obj_val);
    bool operator==(const RegisterFirstAck_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_Result;
    bool __skip_ServerAddr;
    bool __skip_Interval;
    bool __skip_ServerPort;
    bool __skip_ServerIP;

    bool __json_has_Result;
    bool __json_has_ServerAddr;
    bool __json_has_Interval;
    bool __json_has_ServerPort;
    bool __json_has_ServerIP;
};

bool encode(const RegisterFirstAck_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, RegisterFirstAck_t& obj_val);

struct DevMap_t
{
    std::string MAC;
    std::string Vendor;
    std::string Model;
    std::string FirmwareVer;
    std::string HardwareVer;
    std::string IPAddr;
    std::string PlatformID;
    std::string remote;
    std::string rnd;
    uint64_t last_time;
    uint64_t recv_pkts;
    std::string sn;
    std::string ssn;
    std::string ssid1;
    std::string ssid1pass;
    std::string adminpass;
    uint64_t dev_id;
    uint64_t plan_id;

    void skip_MAC() { __skip_MAC = true; }
    void skip_Vendor() { __skip_Vendor = true; }
    void skip_Model() { __skip_Model = true; }
    void skip_FirmwareVer() { __skip_FirmwareVer = true; }
    void skip_HardwareVer() { __skip_HardwareVer = true; }
    void skip_IPAddr() { __skip_IPAddr = true; }
    void skip_PlatformID() { __skip_PlatformID = true; }
    void skip_remote() { __skip_remote = true; }
    void skip_rnd() { __skip_rnd = true; }
    void skip_last_time() { __skip_last_time = true; }
    void skip_recv_pkts() { __skip_recv_pkts = true; }
    void skip_sn() { __skip_sn = true; }
    void skip_ssn() { __skip_ssn = true; }
    void skip_ssid1() { __skip_ssid1 = true; }
    void skip_ssid1pass() { __skip_ssid1pass = true; }
    void skip_adminpass() { __skip_adminpass = true; }
    void skip_dev_id() { __skip_dev_id = true; }
    void skip_plan_id() { __skip_plan_id = true; }

    bool json_has_MAC() const { return __json_has_MAC; }
    bool json_has_Vendor() const { return __json_has_Vendor; }
    bool json_has_Model() const { return __json_has_Model; }
    bool json_has_FirmwareVer() const { return __json_has_FirmwareVer; }
    bool json_has_HardwareVer() const { return __json_has_HardwareVer; }
    bool json_has_IPAddr() const { return __json_has_IPAddr; }
    bool json_has_PlatformID() const { return __json_has_PlatformID; }
    bool json_has_remote() const { return __json_has_remote; }
    bool json_has_rnd() const { return __json_has_rnd; }
    bool json_has_last_time() const { return __json_has_last_time; }
    bool json_has_recv_pkts() const { return __json_has_recv_pkts; }
    bool json_has_sn() const { return __json_has_sn; }
    bool json_has_ssn() const { return __json_has_ssn; }
    bool json_has_ssid1() const { return __json_has_ssid1; }
    bool json_has_ssid1pass() const { return __json_has_ssid1pass; }
    bool json_has_adminpass() const { return __json_has_adminpass; }
    bool json_has_dev_id() const { return __json_has_dev_id; }
    bool json_has_plan_id() const { return __json_has_plan_id; }

    DevMap_t();
    DevMap_t& operator=(const DevMap_t& obj_val);
    bool operator==(const DevMap_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_MAC;
    bool __skip_Vendor;
    bool __skip_Model;
    bool __skip_FirmwareVer;
    bool __skip_HardwareVer;
    bool __skip_IPAddr;
    bool __skip_PlatformID;
    bool __skip_remote;
    bool __skip_rnd;
    bool __skip_last_time;
    bool __skip_recv_pkts;
    bool __skip_sn;
    bool __skip_ssn;
    bool __skip_ssid1;
    bool __skip_ssid1pass;
    bool __skip_adminpass;
    bool __skip_dev_id;
    bool __skip_plan_id;

    bool __json_has_MAC;
    bool __json_has_Vendor;
    bool __json_has_Model;
    bool __json_has_FirmwareVer;
    bool __json_has_HardwareVer;
    bool __json_has_IPAddr;
    bool __json_has_PlatformID;
    bool __json_has_remote;
    bool __json_has_rnd;
    bool __json_has_last_time;
    bool __json_has_recv_pkts;
    bool __json_has_sn;
    bool __json_has_ssn;
    bool __json_has_ssid1;
    bool __json_has_ssid1pass;
    bool __json_has_adminpass;
    bool __json_has_dev_id;
    bool __json_has_plan_id;
};

bool encode(const DevMap_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, DevMap_t& obj_val);

struct DevConfig_t
{
    std::string MAC;
    int32_t platcode;

    void skip_MAC() { __skip_MAC = true; }
    void skip_platcode() { __skip_platcode = true; }

    bool json_has_MAC() const { return __json_has_MAC; }
    bool json_has_platcode() const { return __json_has_platcode; }

    DevConfig_t();
    DevConfig_t& operator=(const DevConfig_t& obj_val);
    bool operator==(const DevConfig_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_MAC;
    bool __skip_platcode;

    bool __json_has_MAC;
    bool __json_has_platcode;
};

bool encode(const DevConfig_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, DevConfig_t& obj_val);

struct NetcoreConfig_t
{
    std::string param_name;
    std::string param_value;
    uint64_t param_time;

    void skip_param_name() { __skip_param_name = true; }
    void skip_param_value() { __skip_param_value = true; }
    void skip_param_time() { __skip_param_time = true; }

    bool json_has_param_name() const { return __json_has_param_name; }
    bool json_has_param_value() const { return __json_has_param_value; }
    bool json_has_param_time() const { return __json_has_param_time; }

    NetcoreConfig_t();
    NetcoreConfig_t& operator=(const NetcoreConfig_t& obj_val);
    bool operator==(const NetcoreConfig_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_param_name;
    bool __skip_param_value;
    bool __skip_param_time;

    bool __json_has_param_name;
    bool __json_has_param_value;
    bool __json_has_param_time;
};

bool encode(const NetcoreConfig_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, NetcoreConfig_t& obj_val);

struct OpSvcAddr_t
{
    int32_t svr_addr_id;
    int32_t svr_provides_id;
    std::string svr_addr;
    int32_t svr_port;

    void skip_svr_addr_id() { __skip_svr_addr_id = true; }
    void skip_svr_provides_id() { __skip_svr_provides_id = true; }
    void skip_svr_addr() { __skip_svr_addr = true; }
    void skip_svr_port() { __skip_svr_port = true; }

    bool json_has_svr_addr_id() const { return __json_has_svr_addr_id; }
    bool json_has_svr_provides_id() const { return __json_has_svr_provides_id; }
    bool json_has_svr_addr() const { return __json_has_svr_addr; }
    bool json_has_svr_port() const { return __json_has_svr_port; }

    OpSvcAddr_t();
    OpSvcAddr_t& operator=(const OpSvcAddr_t& obj_val);
    bool operator==(const OpSvcAddr_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_svr_addr_id;
    bool __skip_svr_provides_id;
    bool __skip_svr_addr;
    bool __skip_svr_port;

    bool __json_has_svr_addr_id;
    bool __json_has_svr_provides_id;
    bool __json_has_svr_addr;
    bool __json_has_svr_port;
};

bool encode(const OpSvcAddr_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, OpSvcAddr_t& obj_val);

struct PlatIdPer_t
{
    uint64_t ID;
    int32_t per;

    void skip_ID() { __skip_ID = true; }
    void skip_per() { __skip_per = true; }

    bool json_has_ID() const { return __json_has_ID; }
    bool json_has_per() const { return __json_has_per; }

    PlatIdPer_t();
    PlatIdPer_t& operator=(const PlatIdPer_t& obj_val);
    bool operator==(const PlatIdPer_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_ID;
    bool __skip_per;

    bool __json_has_ID;
    bool __json_has_per;
};

bool encode(const PlatIdPer_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, PlatIdPer_t& obj_val);

struct DispatcherVip_t
{
    std::string mac;
    uint64_t addtime;
    std::string info;
    int32_t loglev;

    void skip_mac() { __skip_mac = true; }
    void skip_addtime() { __skip_addtime = true; }
    void skip_info() { __skip_info = true; }
    void skip_loglev() { __skip_loglev = true; }

    bool json_has_mac() const { return __json_has_mac; }
    bool json_has_addtime() const { return __json_has_addtime; }
    bool json_has_info() const { return __json_has_info; }
    bool json_has_loglev() const { return __json_has_loglev; }

    DispatcherVip_t();
    DispatcherVip_t& operator=(const DispatcherVip_t& obj_val);
    bool operator==(const DispatcherVip_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_mac;
    bool __skip_addtime;
    bool __skip_info;
    bool __skip_loglev;

    bool __json_has_mac;
    bool __json_has_addtime;
    bool __json_has_info;
    bool __json_has_loglev;
};

bool encode(const DispatcherVip_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, DispatcherVip_t& obj_val);

struct DispatcherLog_t
{
    std::string idnum;
    int32_t direction;
    int32_t step;
    int32_t result;
    std::string mac;
    std::string action;
    std::string hostip;
    uint64_t begintime;
    uint64_t begintime_ms;
    uint64_t addtime;
    uint64_t addtime_ms;
    uint64_t costtime;
    std::string indata;
    std::string outdata;
    std::string userip;

    void skip_idnum() { __skip_idnum = true; }
    void skip_direction() { __skip_direction = true; }
    void skip_step() { __skip_step = true; }
    void skip_result() { __skip_result = true; }
    void skip_mac() { __skip_mac = true; }
    void skip_action() { __skip_action = true; }
    void skip_hostip() { __skip_hostip = true; }
    void skip_begintime() { __skip_begintime = true; }
    void skip_begintime_ms() { __skip_begintime_ms = true; }
    void skip_addtime() { __skip_addtime = true; }
    void skip_addtime_ms() { __skip_addtime_ms = true; }
    void skip_costtime() { __skip_costtime = true; }
    void skip_indata() { __skip_indata = true; }
    void skip_outdata() { __skip_outdata = true; }
    void skip_userip() { __skip_userip = true; }

    bool json_has_idnum() const { return __json_has_idnum; }
    bool json_has_direction() const { return __json_has_direction; }
    bool json_has_step() const { return __json_has_step; }
    bool json_has_result() const { return __json_has_result; }
    bool json_has_mac() const { return __json_has_mac; }
    bool json_has_action() const { return __json_has_action; }
    bool json_has_hostip() const { return __json_has_hostip; }
    bool json_has_begintime() const { return __json_has_begintime; }
    bool json_has_begintime_ms() const { return __json_has_begintime_ms; }
    bool json_has_addtime() const { return __json_has_addtime; }
    bool json_has_addtime_ms() const { return __json_has_addtime_ms; }
    bool json_has_costtime() const { return __json_has_costtime; }
    bool json_has_indata() const { return __json_has_indata; }
    bool json_has_outdata() const { return __json_has_outdata; }
    bool json_has_userip() const { return __json_has_userip; }

    DispatcherLog_t();
    DispatcherLog_t& operator=(const DispatcherLog_t& obj_val);
    bool operator==(const DispatcherLog_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_idnum;
    bool __skip_direction;
    bool __skip_step;
    bool __skip_result;
    bool __skip_mac;
    bool __skip_action;
    bool __skip_hostip;
    bool __skip_begintime;
    bool __skip_begintime_ms;
    bool __skip_addtime;
    bool __skip_addtime_ms;
    bool __skip_costtime;
    bool __skip_indata;
    bool __skip_outdata;
    bool __skip_userip;

    bool __json_has_idnum;
    bool __json_has_direction;
    bool __json_has_step;
    bool __json_has_result;
    bool __json_has_mac;
    bool __json_has_action;
    bool __json_has_hostip;
    bool __json_has_begintime;
    bool __json_has_begintime_ms;
    bool __json_has_addtime;
    bool __json_has_addtime_ms;
    bool __json_has_costtime;
    bool __json_has_indata;
    bool __json_has_outdata;
    bool __json_has_userip;
};

bool encode(const DispatcherLog_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, DispatcherLog_t& obj_val);

} // namespace slothjson

#endif // __dispatcher_msg_20180710165005_h__