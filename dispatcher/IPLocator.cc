#include <stdio.h>
#include <sstream>
#include <sys/timeb.h>
#include <errno.h>
#include <string.h>

#include "IPLocator.h"

#define IP_FILENAME "qqzeng-ip-utf8.dat"
//#define IP_FILENAME "qqzeng-ip-gbk.dat"
prefix_map c1;

IPSearch* IPSearch::sIPSearch = NULL;

struct locat_area_t {
	int code;
	const char *name;
	const char *name_new;
};

static struct locat_area_t g_area[][32] =  {
		{
			{1  , "广东省", "广东"},
			{119, "东莞市", "东莞"},
			{137, "韶关市", "韶关"},
			{138, "佛山市", "佛山"},
			{139, "茂名市", "茂名"},
			{140, "珠海市", "珠海"},
			{141, "梅州市", "梅州"},
			{187, "中山市", "中山"},
			{197, "清远市", "清远"},
			{198, "湛江市", "湛江"},
			{199, "阳江市", "阳江"},
			{200, "河源市", "河源"},
			{201, "潮州市", "潮州"},
			{257, "广州市", "广州"},
			{258, "云浮市", "云浮"},
			{259, "揭阳市", "揭阳"},
			{301, "惠州市", "惠州"},
			{302, "江门市", "江门"},
			{303, "汕头市", "汕头"},
			{338, "肇庆市", "肇庆"},
			{339, "汕尾市", "汕尾"},
			{340, "深圳市", "深圳"},
			{0, "", ""}
		},
		{
			{2  , "上海市", "上海"},
			{289, "上海市", "上海"},
			{0, "", ""}
		},
		{
			{3  , "江苏省", "江苏"},
			{160, "镇江市", "镇江"},
			{161, "南通市", "南通"},
			{162, "淮安市", "淮安"},
			{223, "盐城市", "盐城"},
			{224, "苏州市", "苏州"},
			{276, "泰州市", "泰州"},
			{277, "宿迁市", "宿迁"},
			{315, "南京市", "南京"},
			{316, "徐州市", "徐州"},
			{317, "无锡市", "无锡"},
			{346, "扬州市", "扬州"},
			{347, "连云港市" , "连云港"},
			{348, "常州市", "常州"},
			{0, "", ""}
		},
		{
			{4  , "浙江省", "浙江"},
			{178, "温州市", "温州"},
			{179, "杭州市", "杭州"},
			{180, "宁波市", "宁波"},
			{243, "衢州市", "衢州"},
			{244, "台州市", "台州"},
			{245, "舟山市", "舟山"},
			{292, "丽水市", "丽水"},
			{293, "绍兴市", "绍兴"},
			{294, "湖州市", "湖州"},
			{333, "金华市", "金华"},
			{334, "嘉兴市", "嘉兴"},
			{0, "", ""}
		},
		{
			{5  , "福建省", "福建"},
			{133, "南平市", "南平"},
			{134, "泉州市", "泉州"},
			{192, "宁德市", "宁德"},
			{193, "龙岩市", "龙岩"},
			{194, "厦门市", "厦门"},
			{195, "莆田市", "莆田"},
			{254, "三明市", "三明"},
			{255, "漳州市", "漳州"},
			{300, "福州市", "福州"},
			{0, "", ""}
		},
		{
			{6, "四川省", "四川"},
			{73, "甘孜藏族自治州","甘孜"},
			{74, "德阳市", "德阳"},
			{75, "成都市", "成都"},
			{76, "雅安市", "雅安"},
			{77, "眉山市", "眉山"},
			{78, "自贡市", "自贡"},
			{79, "乐山市", "乐山"},
			{80, "凉山彝族自治州", "凉山"},
			{81, "攀枝花市","攀枝花"},
			{185, "阿坝藏族羌族自治州","阿坝"},
			{186, "宜宾市", "宜宾"},
			{239, "巴中市", "巴中"},
			{240, "绵阳市", "绵阳"},
			{241, "广安市", "广安"},
			{242, "资阳市", "资阳"},
			{248, "内江市", "内江"},
			{291, "南充市", "南充"},
			{329, "广元市", "广元"},
			{330, "遂宁市", "遂宁"},
			{331, "泸州市", "泸州"},
			{369, "达州市", "达州"},
			{0, "", ""}
		},
		{
			{7  , "湖北省", "湖北"},
			{122, "鄂州市", "鄂州"},
			{156, "襄阳市", "襄阳"},
			{157, "荆州市", "荆州"},
			{216, "十堰市", "十堰"},
			{217, "荆门市", "荆门"},
			{218, "武汉市", "武汉"},
			{270, "宜昌市", "宜昌"},
			{271, "黄冈市", "黄冈"},
			{310, "孝感市", "孝感"},
			{311, "黄石市", "黄石"},
			{362, "咸宁市", "咸宁"},
			{371, "随州市", "随州"},
			{373, "恩施土家族苗族自治州", "恩施"},
			{1293, "潜江市", "潜江"},
			{1654, "天门市", "天门"},
			{1713, "仙桃市", "仙桃"},
			{2734, "神农架林区", "神农架"},
			{0, "", ""}
		},
		{
			{8  , "湖南省", "湖南"},
			{158, "长沙市", "长沙"},
			{159, "衡阳市", "衡阳"},
			{219, "常德市", "常德"},
			{220, "岳阳市", "岳阳"},
			{221, "娄底市", "娄底"},
			{222, "株洲市", "株洲"},
			{272, "益阳市", "益阳"},
			{273, "邵阳市", "邵阳"},
			{274, "湘西土家族苗族自治州", "湘西"},
			{275, "郴州市", "郴州"},
			{312, "张家界市", "张家界"},
			{313, "湘潭市", "湘潭"},
			{314, "永州市", "永州"},
			{363, "怀化市", "怀化"},
			{0, "", ""}
		},
		{
			{9  , "陕西省", "陕西"},
			{170, "渭南市", "渭南"},
			{171, "宝鸡市", "宝鸡"},
			{231, "榆林市", "榆林"},
			{232, "铜川市", "铜川"},
			{233, "西安市", "西安"},
			{284, "延安市", "延安"},
			{285, "商洛市", "商洛"},
			{323, "咸阳市", "咸阳"},
			{324, "安康市", "安康"},
			{352, "汉中市", "汉中"},
			{0, "", ""}
		},
		{
			{10 , "云南省", "云南"},
			{104, "昆明市", "昆明"},
			{105, "楚雄彝族自治州", "楚雄"},
			{106, "玉溪市", "玉溪"},
			{107, "红河哈尼族彝族自治州", "红河"},
			{108, "普洱市", "普洱"},
			{109, "西双版纳傣族自治州", "西双版纳"},
			{110, "临沧市", "临沧市"},
			{111, "大理白族自治州", "大理"},
			{112, "保山市", "保山市"},
			{113, "怒江傈僳族自治州", "怒江"},
			{114, "丽江市", "丽江"},
			{115, "迪庆藏族自治州", "迪庆"},
			{116, "德宏傣族景颇族自治州", "德宏"},
			{177, "文山壮族苗族自治州", "文山"},
			{249, "曲靖市", "曲靖"},
			{336, "昭通市", "昭通"},
			{0, "", ""}
		},
		{
			{11 , "安徽省", "安徽"},
			{126, "蚌埠市", "蚌埠"},
			{127, "合肥市", "合肥"},
			{128, "阜阳市", "阜阳"},
			{129, "芜湖市", "芜湖"},
			{130, "安庆市", "安庆"},
			{188, "亳州市", "亳州"},
			{189, "滁州市", "滁州"},
			{190, "宣城市", "宣城"},
			{250, "淮南市", "淮南"},
			{252, "黄山市", "黄山"},
			{253, "淮北市", "淮北"},
			{298, "六安市", "六安"},
			{299, "池州市", "池州"},
			{337, "铜陵市", "铜陵"},
			{358, "马鞍山市", "马鞍山"},
			{370, "宿州市", "宿州"},
			{0, "", ""}
		},
		{
			{12 , "广西壮族自治区", "广西"},
			{142, "桂林市", "桂林"},
			{143, "河池市", "河池"},
			{144, "崇左市", "崇左"},
			{145, "钦州市", "钦州"},
			{202, "来宾市", "来宾"},
			{203, "百色市", "百色"},
			{204, "防城港市", "防城港"},
			{260, "贺州市", "贺州"},
			{261, "南宁市", "南宁"},
			{295, "北海市", "北海"},
			{304, "梧州市", "梧州"},
			{305, "柳州市", "柳州"},
			{341, "贵港市", "贵港"},
			{361, "玉林市", "玉林"},
			{0, "", ""}
		},
		{
			{13, "黑龙江省", "黑龙江"},
			{38, "大兴安岭地区", "大兴安岭"},
			{39, "黑河市", "黑河"},
			{40, "伊春市", "伊春"},
			{41, "齐齐哈尔市", "齐齐哈尔"},
			{42, "佳木斯市", "佳木斯"},
			{43, "鹤岗市", "鹤岗"},
			{44, "绥化市", "绥化"},
			{45, "双鸭山市", "双鸭山"},
			{46, "鸡西市", "鸡西"},
			{47, "七台河市", "七台河"},
			{48, "哈尔滨市", "哈尔滨"},
			{49, "牡丹江市", "牡丹江"},
			{50, "大庆市", "大庆"},
			{0, "", ""}
		},
		{
			{14, "重庆市", "重庆"},
			{132, "重庆市", "重庆"},
			{0, "", ""}
		},
		{
			{15 , "江西省", "江西"},
			{163, "南昌市", "南昌"},
			{164, "新余市", "新余"},
			{225, "景德镇市", "景德镇"},
			{226, "抚州市", "抚州"},
			{278, "宜春市", "宜春"},
			{279, "鹰潭市", "鹰潭"},
			{318, "吉安市", "吉安"},
			{349, "九江市", "九江"},
			{350, "萍乡市", "萍乡"},
			{364, "上饶市", "上饶"},
			{365, "赣州市", "赣州"},
			{0, "", ""}
		},
		{
			{16 , "甘肃省", "甘肃"},
			{33 , "嘉峪关市", "嘉峪关"},
			{34 , "金昌市", "金昌"},
			{35 , "白银市", "白银"},
			{36 , "兰州市", "兰州"},
			{37 , "酒泉市", "酒泉"},
			{117, "张掖市", "张掖"},
			{118, "武威市", "武威"},
			{135, "庆阳市", "庆阳"},
			{136, "定西市", "定西"},
			{182, "临夏回族自治州", "临夏"},
			{196, "天水市", "天水"},
			{247, "甘南藏族自治州", "甘南"},
			{256, "陇南市", "陇南"},
			{359, "平凉市", "平凉"},
			{0, "", ""}
		},
		{
			{17 , "贵州省", "贵州"},
			{146, "贵阳市", "贵阳"},
			{147, "六盘水市", "六盘水"},
			{205, "铜仁市", "铜仁"},
			{206, "毕节市", "毕节"},
			{262, "遵义市", "遵义"},
			{263, "安顺市", "安顺"},
			{306, "黔南布依族苗族自治州", "黔南"},
			{342, "黔东南苗族侗族自治州", "黔东南"},
			{343, "黔西南布依族苗族自治州", "黔西南"},
			{0, "", ""}
		},
		{
			{18 , "内蒙古自治区", "内蒙古"},
			{61 , "呼伦贝尔市", "呼伦贝尔"},
			{62 , "兴安盟", "兴安盟"},
			{63 , "锡林郭勒盟", "锡林郭勒盟"},
			{64 , "通辽市", "通辽"},
			{123, "乌海市", "乌海"},
			{168, "乌兰察布市", "乌兰察布"},
			{169, "巴彦淖尔市", "巴彦淖尔"},
			{229, "包头市", "包头"},
			{230, "阿拉善盟", "阿拉善盟"},
			{283, "鄂尔多斯市", "鄂尔多斯"},
			{297, "赤峰市", "赤峰"},
			{321, "呼和浩特市", "呼和浩特"},
			{0, "", ""}
		},
		{
			{19 , "宁夏回族自治区", "宁夏"},
			{181, "中卫市", "中卫"},
			{246, "固原市", "固原"},
			{322, "吴忠市", "吴忠"},
			{335, "石嘴山市", "石嘴山"},
			{360, "银川市", "银川"},
			{0, "", ""}
		},
		{
			{20, "青海省", "青海"},
			{65, "海西蒙古族藏族自治州", "海西"},
			{66, "西宁市", "西宁"},
			{67, "海北藏族自治州", "海北"},
			{68, "海南藏族自治州", "海南"},
			{69, "海东地区", "海东"},
			{70, "黄南藏族自治州", "黄南"},
			{71, "玉树藏族自治州", "玉树"},
			{72, "果洛藏族自治州", "果洛"},
			{0, "", ""}
		},
		{
			{21 , "西藏自治区", "西藏"},
			{97 , "山南地区", "山南"},
			{98 , "林芝地区", "林芝"},
			{99 , "昌都地区", "昌都"},
			{100, "拉萨市", "拉萨"},
			{101, "那曲地区", "那曲"},
			{102, "日喀则地区", "日喀则"},
			{103, "阿里地区", "阿里"},
			{0, "", ""}
		},
		{
			{22 , "北京市", "北京"},
			{131, "北京市", "北京"},
			{0, "", ""}
		},
		{
			{23, "香港特别行政区", "香港"},
			{2912, "香港特别行政区", "香港"},
			{0, "", ""}
		},
		{
			{24, "澳门特别行政区", "澳门"},
			{2911, "澳门特别行政区", "澳门"},
			{0, "", ""}
		},
		{
			{25 , "天津市", "天津"},
			{332, "天津市", "天津"},
			{0, "", ""}
		},
		{
			{26 , "山东省", "山东"},
			{124, "莱芜市", "莱芜"},
			{172, "枣庄市", "枣庄"},
			{173, "日照市", "日照"},
			{174, "东营市", "东营"},
			{175, "威海市", "威海"},
			{234, "临沂市", "临沂"},
			{235, "滨州市", "滨州"},
			{236, "青岛市", "青岛"},
			{286, "济宁市", "济宁"},
			{287, "潍坊市", "潍坊"},
			{288, "济南市", "济南"},
			{325, "泰安市", "泰安"},
			{326, "烟台市", "烟台"},
			{353, "菏泽市", "菏泽"},
			{354, "淄博市", "淄博"},
			{366, "聊城市", "聊城"},
			{372, "德州市", "德州"},
			{0, "", ""}
		},
		{
			{27 , "辽宁省", "辽宁"},
			{58 , "沈阳市", "沈阳"},
			{59 , "阜新市", "阜新"},
			{60 , "铁岭市", "铁岭"},
			{166, "锦州市", "锦州"},
			{167, "大连市", "大连"},
			{184, "抚顺市", "抚顺"},
			{227, "本溪市", "本溪"},
			{228, "盘锦市", "盘锦"},
			{280, "朝阳市", "朝阳"},
			{281, "营口市", "营口"},
			{282, "丹东市", "丹东"},
			{319, "葫芦岛市", "葫芦岛"},
			{320, "鞍山市", "鞍山"},
			{351, "辽阳市", "辽阳"},
			{0, "", ""}
		},
		{
			{28 , "山西省", "山西"},
			{176, "太原市", "太原"},
			{237, "朔州市", "朔州"},
			{238, "晋中市", "晋中"},
			{290, "晋城市", "晋城"},
			{327, "吕梁市", "吕梁"},
			{328, "运城市", "运城"},
			{355, "大同市", "大同"},
			{356, "长治市", "长治"},
			{357, "阳泉市", "阳泉"},
			{367, "忻州市", "忻州"},
			{368, "临汾市", "临汾"},
			{0, "", ""}
		},
		{
			{29, "吉林省", "吉林"},
			{51, "白城市", "白城"},
			{52, "松原市", "松原"},
			{53, "长春市", "长春"},
			{54, "延边朝鲜族自治州", "延边"},
			{55, "吉林市", "吉林"},
			{56, "四平市", "四平"},
			{57, "白山市", "白山"},
			{165, "通化市", "通化"},
			{183, "辽源市", "辽源"},
			{0, "", ""}
		},
		{
			{30, "新疆维吾尔自治区", "新疆"},
			{82, "和田地区", "和田"},
			{83, "喀什地区", "喀什"},
			{84, "克孜勒苏柯尔克孜自治州", "克孜勒苏柯尔克孜"},
			{85, "阿克苏地区", "阿克苏"},
			{86, "巴音郭楞蒙古自治州", "巴音郭楞"},
			{88, "博尔塔拉蒙古自治州", "博尔塔拉"},
			{89, "吐鲁番地区", "吐鲁番"},
			{90, "伊犁哈萨克自治州", "伊犁"},
			{91, "哈密地区", "哈密"},
			{92, "乌鲁木齐市", "乌鲁木齐"},
			{93, "昌吉回族自治州", "昌吉"},
			{94, "塔城地区", "塔城"},
			{95, "克拉玛依市", "克拉玛依"},
			{96, "阿勒泰地区", "阿勒泰"},
			{731, "阿拉尔市", "阿拉尔"},
			{770, "石河子市", "石河子"},
			{789, "五家渠市", "五家渠"},
			{792, "图木舒克市", "图木舒克"},
			{0, "", ""}
		},
		{
			{31  , "海南省", "海南"},
			{121 , "三亚市", "三亚"},
			{125 , "海口市", "海口"},
			{1215, "儋州市", "儋州"},
			{1216, "万宁市", "万宁"},
			{1644, "五指山市", "五指山"},
			{2358, "琼海市", "琼海"},
			{2634, "东方市", "东方"},
			{2758, "文昌市", "文昌"},
			{0, "", ""}
		},
		{
			{32 , "河南省", "河南"},
			{152, "新乡市", "新乡"},
			{153, "洛阳市", "洛阳"},
			{154, "商丘市", "商丘"},
			{155, "许昌市", "许昌"},
			{209, "濮阳市", "濮阳"},
			{210, "开封市", "开封"},
			{211, "焦作市", "焦作"},
			{212, "三门峡市", "三门峡"},
			{213, "平顶山市", "平顶山"},
			{214, "信阳市", "信阳"},
			{215, "鹤壁市", "鹤壁"},
			{267, "安阳市", "安阳"},
			{268, "郑州市", "郑州"},
			{269, "驻马店市", "驻马店"},
			{308, "周口市", "周口"},
			{309, "南阳市", "南阳"},
			{344, "漯河市", "漯河"},
			{1277, "济源市", "济源"},
			{0, "", ""}
		},
		{
			{33 , "河北省", "河北"},
			{148, "秦皇岛市", "秦皇岛"},
			{149, "沧州市", "沧州"},
			{150, "石家庄市", "石家庄"},
			{151, "邯郸市", "邯郸"},
			{191, "廊坊市", "廊坊"},
			{207, "承德市", "承德"},
			{208, "衡水市", "衡水"},
			{264, "张家口市", "张家口"},
			{265, "唐山市", "唐山"},
			{266, "邢台市", "邢台"},
			{307, "保定市", "保定"},
			{400, "雄安新区", "雄安"},
			{0, "", ""}
		},
		{
			{34  , "台湾省", "台湾"},
			{3000, "台北市", "台北"},
			{3001, "高雄市", "高雄"},
			{3002, "台中市", "台中"},
			{3003, "台南市", "台南"},
			{3004, "基隆市", "基隆"},
			{3005, "新竹市", "新竹"},
			{3006, "新北市", "新北"},
			{3007, "桃园市", "桃园"},
			{3008, "嘉义市", "嘉义"},
			{3009, "新竹县", "新竹"},
			{3010, "苗栗县", "苗栗"},
			{3011, "彰化县", "彰化"},
			{3012, "南投县", "南投"},
			{3013, "云林县", "云林"},
			{3014, "嘉义县", "嘉义"},
			{3015, "屏东县", "屏东"},
			{3016, "宜兰县", "宜兰"},
			{3017, "花莲县", "花莲"},
			{3018, "台东县", "台东"},
			{3019, "澎湖县", "澎湖"},
			{3020, "金门县", "金门"},
			{3021, "连江县", "连江"},
			{0, "", ""}
			
		
		},
		{
			{10000, "未知", "未知"},
			{10000, "未知", "未知"},
			{0, "", ""}
		},
		{
			{10001, "中国", "中国"},
			{10001, "中国", "中国"},
			{0, "", ""}
		},
		{
			{0, "", ""}
		}
};

static int locat_area2id(const char *prov, const char *city, int &Prov, int &City) {
	int i, j;
	
	if (!prov) {
		return -1;
	}
	
	Prov = 10000;
	City = 10000;	
	for (i = 0; g_area[i][0].code != 0; i++) {	
		if (0 == strcmp(g_area[i][0].name_new, prov)) {
			Prov = g_area[i][0].code;
			for (j = 1; g_area[i][j].code; j++) {
				if (strcmp(g_area[i][j].name_new, city)) {
					continue;
				}
				City = g_area[i][j].code;
				break;
			}
			break;
		}
	}
	return 0;
}


IPSearch::IPSearch()
	: dataBuffer(NULL)
{}

IPSearch::~IPSearch() 
{
	if (dataBuffer)
		free(dataBuffer);
}

IPSearch* IPSearch::getIns() 
{
	if (!sIPSearch) {
		sIPSearch = new IPSearch();
		if (false == sIPSearch->init()) {
			delete sIPSearch;
			sIPSearch = nullptr;
		}
	}

	return sIPSearch;
}

bool IPSearch::init() 
{
	long size = 0;
	dataBuffer = readFile(IP_FILENAME, &size);

	if (dataBuffer)
	{
		first_index = ReadInt32(dataBuffer, 0);
		last_index = ReadInt32(dataBuffer, 4);
		first_prefix_index = ReadInt32(dataBuffer, 8);
		last_prefix_index = ReadInt32(dataBuffer, 12);
		index_count = (last_index - first_index) / 12 + 1;
		prefix_count = (last_prefix_index - first_prefix_index) / 9 + 1;

		uint8_t *indexBuffer = dataBuffer + first_prefix_index;
		for (uint32_t i = 0; i < prefix_count; indexBuffer += 9, i++)
		{
			Interval iv;
			uint32_t prefix = (uint32_t)indexBuffer[0];
			iv.start = ReadInt32(indexBuffer, 1);
			iv.end = ReadInt32(indexBuffer, 5);
			c1[prefix] = iv;
		}

		return true;
	}
	return false;
}

uint8_t* IPSearch::readFile(const string path, long* length) {
	uint8_t *data;

	FILE *file = fopen(path.data(), "rb");
	int readBytes = 0;

	if (!file) return 0;

	fseek(file, 0, SEEK_END);
	*length = ftell(file);
	fseek(file, 0, SEEK_SET);
	data = (uint8_t*)malloc(*length * sizeof(uint8_t));
	readBytes = fread(data, 1, *length, file);
	fclose(file);
	if (readBytes != *length)
	{
		free(data);
		data = NULL;
	}
	return data;
}

bool IPSearch::Query(const char*ip,string& str)
{
	uint32_t ip_prefix_value;
	uint32_t intIP = ipToLong(ip, ip_prefix_value);
	uint32_t high = 0;
	uint32_t low = 0;
	uint32_t startIp = 0;
	uint32_t endIp = 0;
	uint32_t local_offset = 0;
	uint32_t local_length = 0;


	prefix_map::iterator it = c1.find(ip_prefix_value);
	if (it != c1.end())
	{
		low = it->second.start;
		high = it->second.end;

		uint32_t my_index = low == high ? low : BinarySearch(low, high, intIP);
		GetIndex(my_index, startIp, endIp, local_offset, local_length);
		if ((startIp <= intIP) && (endIp >= intIP))
		{
			str = GetLocal(local_offset, local_length);
			return true;
		}
	}

	return false;
}

bool IPSearch::QueryToProvCity(const std::string &ip,int &Prov,int &City) {
    std::string str;
	std::vector<std::string> v;
    std::string sep = "|";
    std::string substr;
    std::string::size_type start = 0;
    std::string::size_type index;
    bool isMore = true;

	if (!Query(ip,str)) {
		//LOG_ERROR("not find ip:%s",ip.c_str());
		Prov = 10000;
		City = 10000; 
		return false;
	}

    while ((index = str.find_first_of(sep, start)) != std::string::npos) {
        substr = str.substr(start, index - start);
        v.push_back(substr);

        start = str.find_first_not_of(sep, index);
        if (start == std::string::npos) {
        	isMore = false;
            break;
        }
    }

	if (isMore) {
    	substr = str.substr(start);
    	v.push_back(substr);
    }

	if (v.size() < 5) {
		//LOG_ERROR("ip:%s str:%s parse err",ip.c_str(),str.c_str());
		Prov = 10000;
		City = 10000; 
		return false;
	}

	//LOG_DEBUG("ip:%s str:%s Prov:%s City:%s", ip.c_str(), str.c_str(), v[2].c_str(), v[3].c_str());
	LOG_TRACE("ip:%s str:%s Prov:%s City:%s",ip.c_str(), str.c_str(), v[2].c_str(), v[3].c_str());
	locat_area2id(v[2].c_str(), v[3].c_str(), Prov, City);
    return true;
}

uint32_t IPSearch::BinarySearch(uint32_t low, uint32_t high, uint32_t k)
{
	uint32_t M = 0;
	while (low <= high)
	{
		uint32_t mid = (low + high) / 2;

		uint32_t endipNum = GetEndIp(mid);
		if (endipNum >= k)
		{
			M = mid;
			if (mid == 0)
			{
				break;
			}
			high = mid - 1;
		}
		else
			low = mid + 1;
	}
	return M;
}
void IPSearch::GetIndex(uint32_t left, uint32_t &startip, uint32_t &endip, uint32_t &local_offset, uint32_t &local_length)
{
	uint32_t left_offset = first_index + (left * 12);
	startip = ReadInt32(dataBuffer, left_offset);
	endip = ReadInt32(dataBuffer, left_offset + 4);
	local_offset = ReadInt24(dataBuffer, left_offset + 8);
	local_length = (uint32_t)dataBuffer[left_offset + 11];
}

uint32_t IPSearch::GetEndIp(uint32_t left)
{
	uint32_t left_offset = first_index + (left * 12);
	return ReadInt32(dataBuffer, left_offset + 4);

}


string IPSearch::GetLocal(uint32_t local_offset, uint32_t local_length)
{
	string str("");
	str.append((const char*)dataBuffer + local_offset, local_length);
	return str;
}



string IPSearch::longToIp(uint32_t adr) {
	char buf[256];
	sprintf(buf, "%d.%d.%d.%d", adr >> 24, (adr >> 16) & 0xff, (adr >> 8) & 0xff, adr & 0xff);
	string ipstr(buf);
	return ipstr;

}


uint32_t IPSearch::ipToLong(const char * ip, uint32_t &prefix)
{

	/*int a, b, c, d;
	sscanf_s(ip, "%u.%u.%u.%u", &a, &b, &c, &d);
	prefix = (BYTE)a;
	return ((BYTE)a << 24) | ((BYTE)b << 16) | ((BYTE)c << 8) | (BYTE)d;
	*/

	int a, b, c, d;
	int iLen;
	int abcdIndex = 0;
	iLen = strlen(ip);
	char ips[3];
	memset(ips, '\0', 3);

	int ipsCnt = 0;
	for (int i = 0; i < iLen; i++)
	{
		if ('.' == ip[i])
		{
			if (0 == abcdIndex)
			{
				abcdIndex = 1;
				a = atoi(ips);
			}
			else if (1 == abcdIndex)
			{
				abcdIndex = 2;
				b = atoi(ips);
			}
			else if (2 == abcdIndex)
			{
				abcdIndex = 3;
				c = atoi(ips);
			}

			ipsCnt = 0;
			memset(ips, '\0', 3);
		}
		else
		{
			ips[ipsCnt] = ip[i];
			ipsCnt++;
		}
	}
	d = atoi(ips);

	prefix = (uint32_t)a;
	return ((uint8_t)a << 24) | ((uint8_t)b << 16) | ((uint8_t)c << 8) | (uint8_t)d;

}

uint32_t IPSearch::ReadInt32(uint8_t *buf, int pos)
{
	static uint32_t retInt = 0;
	retInt = (uint32_t)((buf[pos + 3] << 24 & 0xFF000000) | (buf[pos + 2] << 16 & 0x00FF0000) | (buf[pos + 1] << 8 & 0x0000FF00) | (buf[pos] & 0x000000FF));
	return retInt;
}
uint32_t IPSearch::ReadInt24(uint8_t *buf, int pos)
{
	static uint32_t retInt = 0;
	retInt = (uint32_t)((buf[pos + 2] << 16 & 0x00FF0000) | (buf[pos + 1] << 8 & 0x0000FF00) | (buf[pos] & 0x000000FF));
	return retInt;
}

#if 0
int main(int argc, char **argv)
{
	IPSearch *finder = IPSearch::instance();
	if (!finder) {
		printf("the IPSearch instance is null!");
		getchar();
		return -1;
	}

	stringstream ostr;
	string ipstr = ipArray[j];
	const char *ip = "123.4.5.68";
	const string local = finder->Query(ip);
	ostr << ipstr + "->" + local << endl;
	cout << ostr.str() << endl;
	getchar();
	return 0;
}
#endif
